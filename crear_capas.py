# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreadorCapas
                                 A QGIS plugin
 Crear Capas Segun Normatividad - SNCP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by GEOASIS
        email                : geospatialoasis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import *
from qgis.core import QgsVectorLayer, QgsFields, QgsField, QgsFeature, QgsGeometry, QgsProject
from PyQt5.QtCore import QVariant
from qgis.core import QgsWkbTypes
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QDir
import os
import processing
from osgeo import ogr
from qgis.utils import iface
from PyQt5.QtWidgets import QMessageBox





# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .crear_capas_dialog import CreadorCapasDialog
import os.path


class CreadorCapas:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreadorCapas_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Creador de Capas SNCP')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreadorCapas', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        self.dlg = CreadorCapasDialog() # instanciar el cuadro de dialogo

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/crear_capas/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Creador de Capas'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Crear los widgets y conectar señales
        self.dlg.buscar.clicked.connect(self.foldersncp)  # Conectar la señal clicked del botón a una función para manejar la selección de la carpeta
        self.dlg.procesarsncp.clicked.connect(self.botoncrear)
                # Agregar códigos EPSG al QComboBox
        self.dlg.comboBox.addItem("UTM 19 SUR - WGS 84", "32719")
        self.dlg.comboBox.addItem("UTM 18 SUR - WGS 84", "32718")
        self.dlg.comboBox.addItem("UTM 17 SUR - WGS 84", "32717")

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Creador de Capas SNCP'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""



        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CreadorCapasDialog()


            # Conectar la señal 'clicked' del botón 'procesarsncp' a la función 'botoncrear'
            self.dlg.procesarsncp.clicked.connect(self.botoncrear)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    def foldersncp(self):
        # Obtener el directorio base actual (o usar uno predeterminado)
        directorio_base = QDir.currentPath()  # Puedes cambiar esto según tus necesidades

        # Utilizar un cuadro de diálogo para seleccionar la carpeta
        carpeta_seleccionada = QFileDialog.getExistingDirectory(self.dlg, "Seleccionar Carpeta", directorio_base)
        if carpeta_seleccionada:
            self.ruta_carpeta = carpeta_seleccionada
            # Actualizar el texto en el QLineEdit para mostrar la carpeta seleccionada
            self.dlg.carpeta.setText(carpeta_seleccionada)
        else:
            # Si no se selecciona ninguna carpeta, mostrar un mensaje al usuario
            QMessageBox.warning(self.dlg, "Advertencia", "No se seleccionó ninguna carpeta.")
            # Limpiar el texto en el QLineEdit
            self.dlg.carpeta.clear()



    def botoncrear(self):
        if hasattr(self, 'ruta_carpeta'):
            ruta_carpeta = self.ruta_carpeta
            print("Ruta de la carpeta seleccionada:", ruta_carpeta)


            # Obtiene el código EPSG ingresado por el usuario
            epsg_code = self.dlg.comboBox.currentData()
            print(epsg_code)

            # Define la proyección
            crs = QgsCoordinateReferenceSystem(int(epsg_code))


            ruta_base_datos = ruta_carpeta + "/sncp.gpkg"


            # Define una lista de diccionarios con las capas y sus campos
            capas = [
                {
                    'nombre': 'tg_lote',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date),
                        QgsField("ID_MZNA", QVariant.String, len=11),
                        QgsField("CODI_LOTE", QVariant.String, len=3),
                        QgsField("ID_HAB_URBA", QVariant.String, len=6),
                        QgsField("MZNA_DIST", QVariant.String, len=20),
                        QgsField("LOTE_DIST", QVariant.String, len=20),
                        QgsField("SUB_LOTE_DIST", QVariant.String, len=20),
                        QgsField("ESTRUCTURACION", QVariant.String, len=18),
                        QgsField("ZONIFICACION", QVariant.String, len=18),
                        QgsField("CUC", QVariant.String, len=8),
                        QgsField("ZONA_DIST", QVariant.String, len=5)
                    ]
                },
                {
                    'nombre': 'tg_sectores',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("ID_SECTOR", QVariant.String, len=8),
                        QgsField("ID_UBI_GEO", QVariant.String, len=6),
                        QgsField("CODI_SECTOR", QVariant.String, len=2),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_manzana',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("ID_SECTOR", QVariant.String, len=8),
                        QgsField("CODI_MZNA", QVariant.String, len=3),
                        QgsField("NUME_MZNA", QVariant.String, len=20),
                        QgsField("ID_MZNA", QVariant.String, len=11),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_puerta',
                    'geometria': 'Point',
                    'campos': [
                        QgsField("CODI_PUERTA", QVariant.String, len=2),
                        QgsField("ID_PUERTA", QVariant.String, len=20),
                        QgsField("ESTA_PUERTA", QVariant.String, len=1),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_eje_via',
                    'geometria': 'LineString',
                    'campos': [
                        QgsField("CODI_VIA", QVariant.String, len=6),
                        QgsField("TIPO_VIA", QVariant.String, len=5),
                        QgsField("NOMB_VIA", QVariant.String, len=100),
                        QgsField("ID_UBIGEO", QVariant.String, len=6),
                        QgsField("ID_VIA", QVariant.String, len=12),
                        QgsField("ID_SECTOR", QVariant.String, len=8),
                        QgsField("Fech_Actua", QVariant.Date)

                    ]
                },
                {
                    'nombre': 'tg_hab_urb',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("ID_HAB_URBA", QVariant.String, len=10),
                        QgsField("GRUP_URBA", QVariant.String, len=100),
                        QgsField("NOMB_HAB_URBA", QVariant.String, len=100),
                        QgsField("CODI_HAB_URBA", QVariant.String, len=4),
                        QgsField("ID_UBI_GEO", QVariant.String, len=6),
                        QgsField("Tipo_Habilita", QVariant.String, len=10),
                        QgsField("Etap_Habilita", QVariant.String, len=120),
                        QgsField("Expediente", QVariant.String, len=120),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_edificaciones',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("ID_EDIFICACION", QVariant.String, len=16),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("CODI_EDIFICACION", QVariant.String, len=2),
                        QgsField("TIPO_EDIFICACION", QVariant.String, len=2),
                        QgsField("NOMB_EDIFICACION", QVariant.String, len=50),
                        QgsField("CLASIFICACION", QVariant.String, len=2),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_area_invadida',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("ID_UBI_GEO", QVariant.String, len=6),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("CODI_EDIFICACION", QVariant.String, len=2),
                        QgsField("CODI_LOTE", QVariant.String, len=3),
                        QgsField("CODI_MZNA", QVariant.String, len=3),
                        QgsField("CODI_AREA_INV", QVariant.String, len=2),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_uca',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("UBIGEO", QVariant.String, len=6),
                        QgsField("CODI_PISO", QVariant.String, len=2),
                        QgsField("CODI_EDIFICACION", QVariant.String, len=2),
                        QgsField("CODI_LOTE", QVariant.String, len=3),
                        QgsField("CODI_MZNA", QVariant.String, len=3),
                        QgsField("CODI_UCA", QVariant.String, len=2),
                        QgsField("ID_UCA", QVariant.String, len=18),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("ID_CONSTRU", QVariant.String, len=20),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_construccion',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("UBIGEO", QVariant.String, len=6),
                        QgsField("CODI_PISO", QVariant.String, len=2),
                        QgsField("ID_CONSTRU", QVariant.String, len=20),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_parques',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("UBIGEO", QVariant.String, len=6),
                        QgsField("ID_PARQUE", QVariant.String, len=22),
                        QgsField("CODI_PARQUE", QVariant.String, len=2),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("NOMB_PARQUE", QVariant.String, len=100),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_comercio',
                    'geometria': 'Polygon',
                    'campos': [
                        QgsField("UBIGEO", QVariant.String, len=6),
                        QgsField("CODI_PISO", QVariant.String, len=2),
                        QgsField("CODI_LOTE", QVariant.String, len=3),
                        QgsField("ID_LOTE", QVariant.String, len=14),
                        QgsField("ID_UNI_CAT", QVariant.String, len=23),
                        QgsField("Area_Grafica", QVariant.Double, prec=2),
                        QgsField("Peri_Grafico", QVariant.Double, prec=2),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                },
                {
                    'nombre': 'tg_pto_geodesicos',
                    'geometria': 'Point',
                    'campos': [
                        QgsField("Coord_x", QVariant.Double, prec=4),
                        QgsField("Coord_y", QVariant.Double, prec=4),
                        QgsField("Coord_Lat", QVariant.String, len=9),
                        QgsField("Coord_Long", QVariant.String, len=9),
                        QgsField("Alti_Geo", QVariant.Double, prec=4),
                        QgsField("Alti_Orto", QVariant.Double, prec=4),
                        QgsField("Altitud", QVariant.Double, prec=4),
                        QgsField("Orden", QVariant.String, len=1),
                        QgsField("Meto_Lev", QVariant.String, len=50),
                        QgsField("Datum", QVariant.String, len=10),
                        QgsField("Fuente", QVariant.String, len=50),
                        QgsField("Referencia", QVariant.String, len=100),
                        QgsField("Descripcion", QVariant.String, len=100),
                        QgsField("ID_UBI_GEO", QVariant.String, len=6),
                        QgsField("Fech_Actua", QVariant.Date)
                    ]
                }





            ]



            # Itera a través de las capas y crea cada una
            for capa in capas:
                nombre_capa = capa['nombre']
                geometria = capa['geometria']
                campos = capa['campos']

                # Crea la capa vacía
                capa = QgsVectorLayer(geometria + "?crs=" + crs.authid(), nombre_capa, "memory")
                capaProvider = capa.dataProvider()
                capaProvider.addAttributes(campos)
                capa.updateFields()

                # Agrega la capa al proyecto
                QgsProject.instance().addMapLayer(capa)
               
                # Define la lista de capas temporales
                capas_temporales = [layer for layer in QgsProject.instance().mapLayers().values() if layer.isTemporary()]

                # Define los parámetros del algoritmo "native:package"
                parametros = {
                    'LAYERS': [layer.id() for layer in capas_temporales],
                    'OUTPUT': ruta_base_datos,
                    'OVERWRITE': True,
                    'SAVE_STYLES': False,
                    'SAVE_METADATA': True,
                    'SELECTED_FEATURES_ONLY': False,
                    'EXPORT_RELATED_LAYERS': False
                }

                # Ejecuta el algoritmo "native:package"
                processing.run("native:package", parametros)
                # Remueve las capas temporales del proyecto
        capas_temporales = [layer for layer in QgsProject.instance().mapLayers().values() if layer.isTemporary()]
        for layer in capas_temporales:
            QgsProject.instance().removeMapLayer(layer.id())
 


        bbdd = ogr.Open(ruta_base_datos)

        for i in bbdd:
            iface.addVectorLayer(ruta_base_datos + "|layername=" + i.GetName(), i.GetName(), 'ogr')

        # mensaje final
        QMessageBox.warning(self.dlg, "SNCP", "Se Termino con Exito!!!")




